name: Deploy to EKS

on:
  push:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AWS_REGION: us-east-1
  AWS_ROLE_ARN: arn:aws:iam::920372990505:role/github-actions-cicd
  ECR_REPO_NAME: ecr-repository-dev
  EKS_CLUSTER_NAME: EKS-cluster-dev
  VPC_ID: vpc-056809c7d237bb462

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, Tag, and Push Docker Image with Git SHA
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${IMAGE_TAG}"
        docker build -t $IMAGE .
        docker push $IMAGE

    - name: Update Kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Ensure EBS CSI Driver is installed
      run: |
        if ! kubectl get csidriver ebs.csi.aws.com >/dev/null 2>&1; then
          echo "EBS CSI Driver not found. Installing..."
          helm repo add aws-ebs-csi-driver https://kubernetes-sigs.github.io/aws-ebs-csi-driver
          helm repo update
          helm upgrade --install aws-ebs-csi-driver aws-ebs-csi-driver/aws-ebs-csi-driver \
            --namespace kube-system \
            --set controller.serviceAccount.create=false \
            --set controller.serviceAccount.name=ebs-csi-controller-sa \
            --set node.serviceAccount.name=ebs-csi-node-sa
        else
          echo "EBS CSI Driver is already installed."
        fi

    - name: Add Secrets Store CSI Driver Helm repo
      run: |
        helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts
        helm repo update

    - name: Install Secrets Store CSI Driver if not installed
      run: |
        if ! helm list -n kube-system | grep -q csi-secrets-store; then
          helm upgrade --install csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver \
            --namespace kube-system \
            --create-namespace \
            --set syncSecret.enabled=true \
            --set enableSecretRotation=true \
            --set enableSecretProviderClassPodStatus=true
        else
          echo "Secrets Store CSI Driver already installed"
        fi

    - name: Install AWS provider for Secrets Store CSI Driver if not installed
      run: |
        if ! kubectl get daemonset -n kube-system | grep -q secrets-store-csi-driver-provider-aws; then
          kubectl apply -f https://raw.githubusercontent.com/aws/secrets-store-csi-driver-provider-aws/main/deployment/aws-provider-installer.yaml
        else
          echo "AWS provider for Secrets Store CSI Driver already installed"
        fi

    - name: Add AWS Load Balancer Controller Helm repo
      run: |
        helm repo add eks https://aws.github.io/eks-charts
        helm repo update

    - name: Install AWS Load Balancer Controller if not installed
      run: |
        if ! helm list -n kube-system | grep -q aws-load-balancer-controller; then
          helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
            --namespace kube-system \
            --set clusterName=EKS-cluster-dev \
            --set region=us-east-1 \
            --set vpcId=${{ env.VPC_ID }} \
            --set serviceAccount.create=false \
            --set serviceAccount.name=aws-load-balancer-controller
        else
          echo "AWS Load Balancer Controller already installed"
        fi

    - name: Deploy to EKS
      run: |
        kubectl apply -f k8/

    - name: Deploy to EKS with Git SHA image
      env:
        GIT_SHA: ${{ github.sha }}
      run: |
        envsubst < k8/deployment.yml | kubectl apply -f -
